/*
 * Matrix Client-Server Registration and Login API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct RoomParticipationApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> RoomParticipationApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> RoomParticipationApiClient<C> {
        RoomParticipationApiClient {
            configuration: configuration,
        }
    }
}

pub trait RoomParticipationApi {
    fn send_event_txnid(&self, room_id: &str, event_type: &str, txn_id: &str, body: Value) -> Box<Future<Item = ::models::Model200SendEventTxnid, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>RoomParticipationApi for RoomParticipationApiClient<C> {
    fn send_event_txnid(&self, room_id: &str, event_type: &str, txn_id: &str, body: Value) -> Box<Future<Item = ::models::Model200SendEventTxnid, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/rooms/{roomId}/send/{eventType}/{txnId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "access_token".to_owned(),
            }))
            .with_path_param("roomId".to_string(), room_id.to_string())
            .with_path_param("eventType".to_string(), event_type.to_string())
            .with_path_param("txnId".to_string(), txn_id.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

}
