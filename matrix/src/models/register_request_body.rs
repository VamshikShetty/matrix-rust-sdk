/*
 * Matrix Client-Server Registration and Login API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RegisterRequestBody {
    /// Additional authentication information for the user-interactive authentication API.
    #[serde(rename = "auth",skip_serializing_if="Option::is_none")]
    pub auth: Option<::std::collections::HashMap<String, Value>>,
    /// If true, the server binds the email used for authentication to the Matrix ID with the identity server.
    #[serde(rename = "bind_email",skip_serializing_if="Option::is_none")]
    pub bind_email: Option<bool>,
    /// ID of the client device. If this does not correspond to a known client device, a new device will be created. The server will auto-generate a device_id if this is not specified.
    #[serde(rename = "device_id",skip_serializing_if="Option::is_none")]
    pub device_id: Option<String>,
    /// If true, an ``access_token`` and ``device_id`` should not be returned from this call, therefore preventing an automatic login. Defaults to false.
    #[serde(rename = "inhibit_login",skip_serializing_if="Option::is_none")]
    pub inhibit_login: Option<bool>,
    /// A display name to assign to the newly-created device. Ignored if ``device_id`` corresponds to a known device.
    #[serde(rename = "initial_device_display_name",skip_serializing_if="Option::is_none")]
    pub initial_device_display_name: Option<String>,
    /// The desired password for the account.
    #[serde(rename = "password",skip_serializing_if="Option::is_none")]
    pub password: Option<String>,
    /// The basis for the localpart of the desired Matrix ID. If omitted, the homeserver MUST generate a Matrix ID local part.
    #[serde(rename = "username",skip_serializing_if="Option::is_none")]
    pub username: Option<String>,
}

impl RegisterRequestBody {
    pub fn new() -> RegisterRequestBody {
        RegisterRequestBody {
            auth: None,
            bind_email: None,
            device_id: None,
            inhibit_login: None,
            initial_device_display_name: None,
            password: None,
            username: None,
        }
    }
}
