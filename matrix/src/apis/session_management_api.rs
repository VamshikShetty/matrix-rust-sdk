/*
 * Matrix Client-Server Registration and Login API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use serde_json::Value;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SessionManagementApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SessionManagementApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SessionManagementApiClient<C> {
        SessionManagementApiClient {
            configuration: configuration,
        }
    }
}

pub trait SessionManagementApi {
    fn get_login_flows(&self, ) -> Box<Future<Item = ::models::Model200LoginGet, Error = Error<serde_json::Value>>>;
    fn login(&self, login_request_body: ::models::LoginRequestBody) -> Box<Future<Item = ::models::Model200LoginPut, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>SessionManagementApi for SessionManagementApiClient<C> {
    fn get_login_flows(&self, ) -> Box<Future<Item = ::models::Model200LoginGet, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/login".to_string())
            .execute(self.configuration.borrow())
    }

    fn login(&self, login_request_body: ::models::LoginRequestBody) -> Box<Future<Item = ::models::Model200LoginPut, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/login".to_string())
            .with_body_param(login_request_body)
            .execute(self.configuration.borrow())
    }

}
