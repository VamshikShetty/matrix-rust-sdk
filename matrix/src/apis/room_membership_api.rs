/*
 * Matrix Client-Server Registration and Login API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;
use serde_json::Value;

use super::{Error, configuration, urlencode};

pub struct RoomMembershipApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl RoomMembershipApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> RoomMembershipApiClient {
        RoomMembershipApiClient {
            configuration: configuration,
        }
    }
}

pub trait RoomMembershipApi {
    fn join_room(&self, room_id_or_alias: &str, server_name: Vec<String>, join_roomid_req: ::models::JoinRoomidReq) -> Result<::models::RoomId, Error>;
}

impl RoomMembershipApi for RoomMembershipApiClient {
    fn join_room(&self, room_id_or_alias: &str, server_name: Vec<String>, join_roomid_req: ::models::JoinRoomidReq) -> Result<::models::RoomId, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/client/r0/join/{roomIdOrAlias}", configuration.base_path, roomIdOrAlias=urlencode(room_id_or_alias));
        let mut req_builder = client.post(uri_str.as_str());

        let query_server_name = &server_name.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string();
        if ! query_server_name.is_empty() {
            req_builder = req_builder.query(&[("server_name", query_server_name)]);
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("access_token", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&join_roomid_req);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
