openapi: 3.0.1
info:
  title: Matrix Client-Server Registration and Login API
  version: 1.0.0
servers:
- url: https://matrix.org/_matrix/client/r0
paths:
  /login:
    get:
      tags:
      - Session management
      summary: Get the supported login types to authenticate users
      description: Gets the homeserver's supported login types to authenticate users
        Clients should pick one of these and supply it as the ``type`` when logging
        in.
      operationId: get_login_flows
      responses:
        200:
          description: The login types the homeserver supports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200_login_get'
              example:
                flows:
                - type: m.login.password
        429:
          description: This request was rate-limited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rate_limited'
    post:
      tags:
      - Session management
      summary: Authenticates the user.
      description: Authenticates the user, and issues an access token they can use to authorize themself in subsequent requests. If the client does not supply a `device_id`, the server must auto-generate one. The returned access token must be associated with the `device_id` supplied by the client or generated by the server. The server may invalidate any access token previously associated with that device. See `Relationship between access tokens and devices`.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_request_body'
        required: true
      responses:
        200:
          description: The user has been authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200_login_put'
              example:
                user_id: '@cheeky_monkey:matrix.org'
                access_token: abc123
                device_id: GHTYAJCE
        400:
          description: Part of the request was invalid. For example, the login type
            may not be recognised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                errcode: M_UNKNOWN
                error: Bad login type.
        403:
          description: The login attempt failed. For example, the password may have
            been incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                errcode: M_FORBIDDEN
        429:
          description: This request was rate-limited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rate_limited'
                
  /keys/upload:
    post:
      tags: 
        - End-to-end encryption
      summary: Upload end-to-end encryption keys.
      description: Publishes end-to-end encryption keys for the device.
      operationId: uploadKeys
      requestBody:
        description: The keys to be published
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/keys_upload'
        required: false
      responses:
        200:
          description: The provided keys were sucessfully uploaded.
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/200_keys_upload'
                

      security:
      - accessToken: []
                
  /rooms/{roomId}/send/{eventType}/{txnId}:
    put:
      tags:
      - Room participation
      summary: Send a message event to the given room.
      description: |-
        This endpoint is used to send a message event to a room. Message events
        allow access to historical events and pagination, making them suited
        for "once-off" activity in a room.
        The body of the request should be the content object of the event; the
        fields in this object will vary depending on the type of event. See
        `Room Events`_ for the m. event specification.
      operationId: sendEventTxnid
      parameters:
        - name: roomId
          in: path
          description: The room to look up the state in.
          required: true
          schema:
            type: string
          example: '!636q39766251:example.com'
        - name: eventType
          in: path
          description: The type of event.
          required: true
          schema:
            type: string
          example: 
            - m.room.name
        - name: txnId
          in: path
          description: The transaction ID for this event. Clients should generate an ID unique across requests with the same access token; it will be used by the server to ensure idempotency of requests.
          required: true
          schema:
            type: string
          example: "35"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                msgtype: m.text
                body: hello
        required: false
      responses:
        200:
          description: An ID for the sent event.
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/200_sendEventTxnid"
      security:
      - accessToken: []
      
      
  /keys/query:
    post:
      tags:
      - End-to-end encryption
      summary: Download device identity keys.
      description: Returns the current devices and identity keys for the given users.
      operationId: queryKeys
      requestBody:
        description: Query defining the keys to be downloaded
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/query_keys'
        required: false
      responses:
        200:
          description: The device information
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/200_query_keys'
      security:
      - accessToken: []
  
  
  /sendToDevice/{eventType}/{txnId}:
    put:
      tags:
      - Send-to-Device messaging
      summary: Send an event to a given set of devices.
      description: This endpoint is used to send send-to-device events to a set of client devices.
      operationId: sendToDevice
      parameters:
        - name: eventType
          in: path
          description: The type of event.
          required: true
          schema:
            type: string
          example: 
            - m.room.name
        - name: txnId
          in: path
          description: The transaction ID for this event. Clients should generate an ID unique across requests with the same access token; it will be used by the server to ensure idempotency of requests.
          required: true
          schema:
            type: string
          example: "35"
      requestBody:
        content:
          application/json:
            schema:
              title: body
              type: object
              properties:
                messages:
                  type: object
                  additionalProperties:
                    type: object
                    additionalProperties:
                      title: EventContent
                      type: object
                      properties: {}
                      description: Message content
                  description: The messages to send. A map from user ID, to a map from device ID to message body. The device ID may also be `*`, meaning all known devices for the user.
                  example:
                    '@alice:example.com':
                      TLLBEANAAG:
                        example_content_key: value
        required: true
      responses:
        200:
          description: The message was successfully sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_void"
      security:
      - accessToken: []
                
                
components:
  schemas:
    user_identifier:
      title: User identifier
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of identification.  See `Identifier types`_ for supported
            values and additional property descriptions.
        user:
          type: string
          description: The fully qualified user ID or just local part of the user
            ID, to log in.  Deprecated in favour of ``identifier``.
      description: Identification information for a user

    rate_limited:
      required:
      - errcode
      type: object
      properties:
        errcode:
          type: string
          description: The M_LIMIT_EXCEEDED error code
          example: M_LIMIT_EXCEEDED
        error:
          type: string
          description: A human-readable error message.
          example: Too many requests
        retry_after_ms:
          type: integer
          description: |-
            The amount of time in milliseconds the client should wait
            before trying the request again.
          example: 2000
      description: The rate limit was reached for this request
    login_request_body:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The login type being used.
          enum:
          - m.login.password
          - m.login.token
        identifier:
          $ref: '#/components/schemas/user_identifier'
        medium:
          type: string
          description: When logging in using a third party identifier, the medium
            of the identifier. Must be 'email'.  Deprecated in favour of ``identifier``.
        address:
          type: string
          description: Third party identifier for the user.  Deprecated in favour
            of ``identifier``.
        password:
          type: string
          description: |-
            Required when ``type`` is ``m.login.password``. The user's
            password.
        token:
          type: string
          description: Required when ``type`` is ``m.login.token``. Part of `Token-based`_
            login.
        device_id:
          type: string
          description: |-
            ID of the client device. If this does not correspond to a
            known client device, a new device will be created. The server
            will auto-generate a device_id if this is not specified.
        initial_device_display_name:
          type: string
          description: |-
            A display name to assign to the newly-created device. Ignored
            if ``device_id`` corresponds to a known device.
      example:
        type: m.login.password
        identifier:
          type: m.id.user
          user: cheeky_monkey
        password: ilovebananas
        initial_device_display_name: Jungle Phone

    error:
      required:
      - errcode
      type: object
      properties:
        errcode:
          type: string
          description: An error code.
          example: M_UNKNOWN
        error:
          type: string
          description: A human-readable error message.
          example: An unknown error occurred
      description: A Matrix-level Error
    device_keys:
      title: DeviceKeys
      type: object
      description: Device identity keys
      properties:
        user_id:
          type: string
          description: The ID of the user the device belongs to. Must match the user ID used when logging in.
          example: '@alice:example.com'
        device_id:
          type: string
          description: The ID of the device these keys belong to. Must match the device ID used when logging in.
          example: JLAFKJWSCS
        algorithms:
          type: array
          description: The encryption algorithms supported by this device.
          items:
            type: string
          example:
          - m.olm.curve25519-aes-sha256
          - m.megolm.v1.aes-sha
        keys:
          type: object
          additionalProperties:
            type: string
          description: Public identity keys. The names of the properties should be in the format `<algorithm>:<device_id>`. The keys themselves should be encoded as specified by the key algorithm.
          example:
            curve25519:JLAFKJWSCS: 3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI
            ed25519:JLAFKJWSCS: lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI
        signatures:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          description: |-
            Signatures for the device key object. A map from user ID, to a map from
            ``<algorithm>:<device_id>`` to the signature.
            The signature is calculated using the process described at `Signing
            JSON`_.
          example:
            '@alice:example.com':
              ed25519:JLAFKJWSCS: dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA
      required:
      - algorithms
      - device_id
      - keys
      - signatures
      - user_id
    keys_upload:
      type: object
      properties:
        device_keys:
          type: object
          description: Identity keys for the device. May be absent if no new identity keys are required.
          allOf:
          - $ref: '#/components/schemas/device_keys'
        one_time_keys:
          type: object
          properties: {}
          description: One-time public keys for `pre-key` messages. The names of the properties should be in the format `<algorithm>:<key_id>`. The format of the key is determined by the key algorithm. May be absent if no new one-time keys are required.
          example:
            curve25519:AAAAAQ: /qyvZvwjiTxGdGU0RCguDCLeR+nmsb3FfNG3/Ve4vU8
            signed_curve25519:AAAAHg:
              key: zKbLg+NrIjpnagy+pIY6uPL4ZwEG2v+8F9lmgsnlZzs
              signatures:
                "@alice:example.com":
                  'ed25519:JLAFKJWSCS': 'FLWxXqGbwrb8SM3Y795eB6OA8bwBcoMZFXBqnTn58AYWZSqiD45tlBVcDa2L7RwdKXebW/VzDlnfVJ+9jok1Bw'
            signed_curve25519:AAAAHQ:
              key: 'j3fR3HemM16M7CWhoI4Sk5ZsdmdfQHsKL1xuSft6MSw'
              signatures:
                '@alice:example.com':
                  'ed25519:JLAFKJWSCS': 'IQeCEPb9HFk217cU9kw9EOiusC6kMIkoIRnbnfOh5Oc63S1ghgyjShBGpu34blQomoalCyXWyhaaT3MrLZYQAA'
                  
    query_keys:
      type: object
      properties:
        timeout:
          type: integer
          description: |-
            The time (in milliseconds) to wait when downloading keys from
            remote servers. 10 seconds is the recommended default.
          example: 10000
        device_keys:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              description: device ID
          description: |-
            The keys to be downloaded. A map from user ID, to a list of
            device IDs, or to an empty list to indicate all devices for the
            corresponding user.
          example:
            '@alice:example.com': []
        token:
          type: string
          description: |-
            If the client is fetching keys as a result of a device update received
            in a sync request, this should be the 'since' token of that sync request,
            or any later sync token. This allows the server to ensure its response
            contains the keys advertised by the notification in that sync.
      required:
      - device_keys
    
    200_void:
      {}
    200_login_get:
      type: object
      properties:
        flows:
          type: array
          description: The homeserver's supported login types
          items:
            title: LoginFlow
            type: object
            properties:
              type:
                type: string
                description: The login type. This is supplied as the ``type`` when
                  logging in.    
    200_login_put:
      type: object
      properties:
        user_id:
          type: string
          description: The fully-qualified Matrix ID that has been registered.
        access_token:
          type: string
          description: |-
            An access token for the account.
            This access token can then be used to authorize other requests.
        home_server:
          type: string
          description: |-
            The server_name of the homeserver on which the account has
            been registered.
            **Deprecated**. Clients should extract the server_name from
            ``user_id`` (by splitting at the first colon) if they require
            it. Note also that ``homeserver`` is not spelt this way.
        device_id:
          type: string
          description: |-
            ID of the logged-in device. Will be the same as the
            corresponding parameter in the request, if one was specified. 
    200_keys_upload:
      type: object
      properties:
        one_time_key_counts:
          type: object
          additionalProperties:
            type: integer
          description: For each key algorithm, the number of unclaimed one-time keys of that type currently held on the server for this device.
          example:
            curve25519: 10
            signed_curve25519: 20
      required:
        - one_time_key_counts
    200_query_keys:
      type: object
      properties:
        failures:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: If any remote homeservers could not be reached, they are recorded here. The names of the properties are the names of the unreachable servers. If the homeserver could be reached, but the user or device was unknown, no failure is recorded. Instead, the corresponding user or device is missing from the `device_keys` result.
          example: {}
        device_keys:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: object
              properties:
                unsigned:
                  title: UnsignedDeviceInfo
                  type: object
                  properties:
                    device_display_name:
                      type: string
                      description: The display name which the user set on
                        the device.
                  description: |-
                    Additional data added to the device key information
                    by intermediate servers, and not covered by the
                    signatures.
          description: |-
            Information on the queried devices. A map from user ID, to a
            map from device ID to device information.  For each device,
            the information returned will be the same as uploaded via
            ``/keys/upload``, with the addition of an ``unsigned``
            property.
          example:
            '@alice:example.com':
              JLAFKJWSCS:
                user_id: '@alice:example.com'
                device_id: JLAFKJWSCS
                algorithms:
                - m.olm.v1.curve25519-aes-sha256
                - m.megolm.v1.aes-sha
                keys:
                  curve25519:JLAFKJWSCS: 3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI
                  ed25519:JLAFKJWSCS: lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI
                signatures:
                  '@alice:example.com':
                    ed25519:JLAFKJWSCS: dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA
                unsigned:
                  device_display_name: Alice's mobile phone
    200_sendEventTxnid:
      type: object
      properties:
        event_id:
          type: string
          description: A unique identifier for the event.
      example:
        event_id: $YUwRidLecu:example.com
      

      
  securitySchemes:
    accessToken:
      type: apiKey
      description: The access_token returned by a call to `/login` or `/register`
      name: access_token
      in: query
