openapi: 3.0.1
info:
  title: Matrix Client-Server Registration and Login API
  version: 1.0.0
servers:
  - url: 'https://matrix.org/_matrix'
paths:

  # Session management
  /client/r0/login:
    get:
      tags:
        - Session management
      summary: Get the supported login types to authenticate users
      description: Gets the homeserver's supported login types to authenticate users Clients should pick one of these and supply it as the ``type`` when logging in.
      operationId: get_login_flows
      responses:
        '200':
          description: The login types the homeserver supports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200_login_get'
              example:
                flows:
                  - type: m.login.password
        '429':
          description: This request was rate-limited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rate_limited'
    post:
      tags:
        - Session management
      summary: Authenticates the user.
      description: 'Authenticates the user, and issues an access token they can use to authorize themself in subsequent requests. If the client does not supply a `device_id`, the server must auto-generate one. The returned access token must be associated with the `device_id` supplied by the client or generated by the server. The server may invalidate any access token previously associated with that device. See `Relationship between access tokens and devices`.'
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_request_body'
        required: true
      responses:
        '200':
          description: The user has been authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200_login_put'
              example:
                user_id: '@cheeky_monkey:matrix.org'
                access_token: abc123
                device_id: GHTYAJCE
        '400':
          description: 'Part of the request was invalid. For example, the login type may not be recognised.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                errcode: M_UNKNOWN
                error: Bad login type.
        '403':
          description: 'The login attempt failed. For example, the password may have been incorrect.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                errcode: M_FORBIDDEN
        '429':
          description: This request was rate-limited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rate_limited'
 
  /client/r0/logout:
    post:
      tags:
        - Session management
      summary: Invalidates a user access token
      description: Invalidates an existing access token, so that it can no longer be used for\nauthorization.
      operationId: logout
      responses:
        200:
          description: The access token used in the request was succesfully invalidated.

      security:
        - accessToken: []

  /client/r0/logout/all: 
    post:
      tags:
        - Session management
      description: Invalidates all access tokens for a user, so that they can no longer be used for\nauthorization. This includes the access token that made this request. \n\nThis endpoint does not require UI authorization because UI authorization is\ndesigned to protect against attacks where the someone gets hold of a single access\ntoken then takes over the account. This endpoint invalidates all access tokens for\nthe user, including the token used in the request, and therefore the attacker is\nunable to take over the account in this way.
      operationId: logout_all
      responses:
        200:
          description: The user's access tokens were succesfully invalidated.
      security:
        - accessToken: []

  # End-to-end encryption APIs
  /client/r0/keys/upload:
    post:
      tags:
        - End-to-end encryption
      summary: Upload end-to-end encryption keys.
      description: Publishes end-to-end encryption keys for the device.
      operationId: uploadKeys
      requestBody:
        description: The keys to be published
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/keys_upload'
        required: false
      responses:
        '200':
          description: The provided keys were sucessfully uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200_keys_upload'
      security:
        - accessToken: []

  /client/r0/keys/query:
    post:
      tags:
        - End-to-end encryption
      summary: Download device identity keys.
      description: Returns the current devices and identity keys for the given users.
      operationId: queryKeys
      requestBody:
        description: Query defining the keys to be downloaded
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/query_keys'
        required: false
      responses:
        '200':
          description: The device information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200_query_keys'
      security:
        - accessToken: []
        
  /client/r0/keys/changes:
    get:
      tags: 
        - End-to-end encryption
      summary: Query users with recent device key updates.
      description: Gets a list of users who have updated their device identity keys since a\nprevious sync token.\n\nThe server should include in the results any users who:\n\n* currently share a room with the calling user (ie, both users have\n  membership state ``join``); *and*\n* added new device identity keys or removed an existing device with\n  identity keys, between ``from`` and ``to``.
      operationId: getKeysChanges
      security:
        - accessToken: []
      parameters:
        - description:  The desired start point of the list. Should be the ``next_batch`` field\nfrom a response to an earlier call to |/sync|. Users who have not\nuploaded new device identity keys since this point, nor deleted\nexisting devices with identity keys since then, will be excluded\nfrom the results.
          in: query
          name: from
          required: true
          schema:
            type: string
        - description: The desired end point of the list. Should be the ``next_batch``\nfield from a recent call to |/sync| - typically the most recent\nsuch call. This may be used by the server as a hint to check its\ncaches are up to date.
          in: query
          name: to
          required: true
          schema:  
            type: string
      responses: 
        200: 
          description: The list of users who updated their devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200_getKeysChanges'

  /client/r0/keys/claim:
    post:
      tags:
      - End-to-end encryption
      summary: Claim one-time encryption keys.
      description: Claims one-time keys for use in pre-key messages.
      operationId: claimKeys
      requestBody:
        description: Query defining the keys to be claimed
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/claimKeys_request_body"
      responses:
        200:
          description: The claimed keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_claimKeys"
      security:
      - accessToken: []

  # Send-to-Device
  /client/r0/sendToDevice/{eventType}/{txnId}:
    put:
      tags:
        - Send-to-Device messaging
      summary: Send an event to a given set of devices.
      description: This endpoint is used to send send-to-device events to a set of client devices.
      operationId: sendToDevice
      parameters:
        - name: eventType
          in: path
          description: The type of event to send.
          required: true
          schema:
            type: string
          example:
            - m.new_device
        - name: txnId
          in: path
          description: The transaction ID for this event. Clients should generate an ID unique across requests with the same access token; it will be used by the server to ensure idempotency of requests.
          required: true
          schema:
            type: string
          example: '35'
      requestBody:
        content:
          application/json:
            schema:
              title: send_to_device_request_body
              type: object
              additionalProperties:
                type: object
                description: The messages to send. A map from user ID, to a map from device ID to message body. The device ID may also be `*`, meaning all known devices for the user.
                additionalProperties:
                  $ref: "#/components/schemas/EventContent"
              
        required: true
      responses:
        '200':
          description: The message was successfully sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/void'
      security:
        - accessToken: []
        
  # ROOMS
  /client/r0/rooms/{roomId}/send/{eventType}/{txnId}:
    put:
      tags:
        - Room participation
      summary: Send a message event to the given room.
      description: |-
        This endpoint is used to send a message event to a room. Message events
        allow access to historical events and pagination, making them suited
        for "once-off" activity in a room.
        The body of the request should be the content object of the event; the
        fields in this object will vary depending on the type of event. See
        `Room Events`_ for the m. event specification.
      operationId: sendEventTxnid
      parameters:
        - name: roomId
          in: path
          description: The room to look up the state in.
          required: true
          schema:
            type: string
          example: '!636q39766251:example.com'
        - name: eventType
          in: path
          description: The type of event.
          required: true
          schema:
            type: string
          example:
            - m.room.name
        - name: txnId
          in: path
          description: The transaction ID for this event. Clients should generate an ID unique across requests with the same access token; it will be used by the server to ensure idempotency of requests.
          required: true
          schema:
            type: string
          example: '35'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sendEventTxnid_body"
              
        required: false
      responses:
        '200':
          description: An ID for the sent event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_id'
      security:
        - accessToken: []
  
  # ROOM Creation
  /client/r0/createRoom:
    post:
      tags:
      - Room creation
      summary: Create a new room
      description: |-
        Create a new room with various configuration options.

        The server MUST apply the normal state resolution rules when creating
        the new room, including checking power levels for each event. It MUST
        apply the events implied by the request in the following order:

        0. A default ``m.room.power_levels`` event, giving the room creator
           (and not other members) permission to send state events. Overridden
           by the ``power_level_content_override`` parameter.

        1. Events set by the ``preset``. Currently these are the ``m.room.join_rules``,
           ``m.room.history_visibility``, and ``m.room.guest_access`` state events.

        2. Events listed in ``initial_state``, in the order that they are
           listed.

        3. Events implied by ``name`` and ``topic`` (``m.room.name`` and ``m.room.topic``
           state events).

        4. Invite events implied by ``invite`` and ``invite_3pid`` (``m.room.member`` with
           ``membership: invite`` and ``m.room.third_party_invite``).

        The available presets do the following with respect to room state:

        ========================  ==============  ======================  ================  =========
                 Preset           ``join_rules``  ``history_visibility``  ``guest_access``  Other
        ========================  ==============  ======================  ================  =========
        ``private_chat``          ``invite``      ``shared``              ``can_join``
        ``trusted_private_chat``  ``invite``      ``shared``              ``can_join``      All invitees are given the same power level as the room creator.
        ``public_chat``           ``public``      ``shared``              ``forbidden``
        ========================  ==============  ======================  ================  =========

        The server will create a ``m.room.create`` event in the room with the
        requesting user as the creator, alongside other keys provided in the
        ``creation_content``.
      operationId: createRoom
      requestBody:
        description: The desired room configuration.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_room"
      responses:
        200:
          description: Information about the newly created room.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/room_id"
        400:
          description: |2-

            The request is invalid. A meaningful ``errcode`` and description
            error text will be returned. Example reasons for rejection include:

            - The request body is malformed (``errcode`` set to ``M_BAD_JSON``
              or ``M_NOT_JSON``).

            - The room alias specified is already taken (``errcode`` set to
              ``M_ROOM_IN_USE``).

            - The initial state implied by the parameters to the request is
              invalid: for example, the user's ``power_level`` is set below
              that necessary to set the room name (``errcode`` set to
              ``M_INVALID_ROOM_STATE``).

            - The homeserver doesn't support the requested room version, or
              one or more users being invited to the new room are residents
              of a homeserver which does not support the requested room version.
              The ``errcode`` will be ``M_UNSUPPORTED_ROOM_VERSION`` in these
              cases.
          content:
            application/json:
              schema:
                description: A Matrix-level Error
                $ref: "#/components/schemas/error"
      security:
      - accessToken: []

  # Room aliases
  /client/r0/directory/room/{roomAlias}:
    get:
      tags:
      - Room directory
      summary: Get the room ID corresponding to this room alias.
      description: |-
        Requests that the server resolve a room alias to a room ID.

        The server will use the federation API to resolve the alias if the
        domain part of the alias does not correspond to the server's own
        domain.
      operationId: getRoomIdByAlias
      parameters:
      - name: roomAlias
        in: path
        description: The room alias.
        required: true
        schema:
          type: string
        example: '#monkeys:matrix.org'
      responses:
        200:
          description: The room ID and other information for this alias.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/room_dir_request_body"
              example:
                room_id: '!abnjk1jdasj98:capuchins.com'
                servers:
                - capuchins.com
                - matrix.org
                - another.com
        404:
          description: There is no mapped room ID for this room alias.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                errcode: M_NOT_FOUND
                error: 'Room alias #monkeys:matrix.org not found.'
    put:
      tags:
      - Room directory
      summary: Create a new mapping from room alias to room ID.
      operationId: setRoomAlias
      parameters:
      - name: roomAlias
        in: path
        description: The room alias to set.
        required: true
        schema:
          type: string
        example: '#monkeys:matrix.org'
      requestBody:
        description: Information about this room alias.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/room_id"
      responses:
        200:
          description: The mapping was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/void"
        409:
          description: A room alias with that name already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                errcode: M_UNKNOWN
                error: 'Room alias #monkeys:matrix.org already exists.'
      security:
      - accessToken: []
    
    delete:
      tags:
      - Room directory
      summary: Remove a mapping of room alias to room ID.
      description: |-
        Remove a mapping of room alias to room ID.
        Servers may choose to implement additional access control checks here, for instance that room aliases can only be deleted by their creator or a server administrator.
      operationId: deleteRoomAlias
      parameters:
      - name: roomAlias
        in: path
        description: The room alias to remove.
        required: true
        schema:
          type: string
        example: '#monkeys:matrix.org'
      responses:
        200:
          description: The mapping was deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/void"
                
      security:
      - accessToken: []
      
  # Syncing
  /client/r0/sync:
    get:
      tags:
        - Room participation
      summary: Synchronise the client's state and receive new messages.
      description: 'Synchronise the client''s state with the latest state on the server. Clients use this API when they first log in to get an initial snapshot of the state on the server, and then continue to call this API to get incremental deltas to the state, and to receive new messages.'
      operationId: sync
      parameters:
        - name: filter
          in: query
          description: |-
            The ID of a filter created using the filter API or a filter JSON
            object encoded as a string. The server will detect whether it is
            an ID or a JSON object by whether the first character is a ``"{"``
            open brace. Passing the JSON inline is best suited to one off
            requests. Creating a filter using the filter API is recommended for
            clients that reuse the same filter multiple times, for example in
            long poll requests.
          schema:
            type: string
          example: 66696p746572
        - name: since
          in: query
          description: A point in time to continue a sync from.
          schema:
            type: string
          example: s72594_4483_1934
        - name: full_state
          in: query
          description: |-
            Controls whether to include the full state for all rooms the user
            is a member of.

            If this is set to `true`, then all state events will be returned,
            even if `since` is non-empty. The timeline will still be limited
            by the `since` parameter. In this case, the ``timeout`` parameter
            will be ignored and the query will return immediately, possibly with
            an empty timeline.

            If `false`, and `since` is non-empty, only state which has
            changed since the point indicated by `since` will be returned.

            By default, this is `false`.
          schema:
            type: boolean
            default: false
          example: 'false'
        - name: set_presence
          in: query
          description: |-
            Controls whether the client is automatically marked as online by
            polling this API. If this parameter is omitted then the client is
            automatically marked as online when it uses this API. Otherwise if
            the parameter is set to "offline" then the client is not marked as
            being online when it uses this API. When set to "unavailable", the
            client is marked as being idle.
          schema:
            type: string
            enum:
              - offline
              - online
              - unavailable
          example: offline
        - name: timeout
          in: query
          description: |-
            The maximum time to wait, in milliseconds, before returning this
            request. If no events (or other data) become available before this
            time elapses, the server will return a response with empty fields.

            By default, this is ``0``, so the server will return immediately
            even if the response is empty.
          schema:
            default: 0
            type: integer
          example: 30000
      security:
        - accessToken: []
      responses:
        '200':
          description: The initial snapshot or delta for the client to use to update their state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sync_response'
              example:
                next_batch: s72595_4483_1934
                presence:
                  events:
                    - sender: '@alice:example.com'
                      type: m.presence
                      content:
                        presence: online
                account_data:
                  events:
                    - type: org.example.custom.config
                      content:
                        custom_config_key: custom_config_value
                rooms:
                  join:
                    '!726s6s6q:example.com':
                      state:
                        events:
                          - sender: '@alice:example.com'
                            type: m.room.member
                            state_key: '@alice:example.com'
                            content:
                              membership: join
                            origin_server_ts: 1417731086795
                            event_id: '$66697273743031:example.com'
                      timeline:
                        events:
                          - sender: '@bob:example.com'
                            type: m.room.member
                            state_key: '@bob:example.com'
                            content:
                              membership: join
                            prev_content:
                              membership: invite
                            origin_server_ts: 1417731086795
                            event_id: '$7365636s6r6432:example.com'
                          - sender: '@alice:example.com'
                            type: m.room.message
                            txn_id: '1234'
                            content:
                              body: I am a fish
                              msgtype: m.text
                            origin_server_ts: 1417731086797
                            event_id: '$74686972643033:example.com'
                        limited: true
                        prev_batch: t34-23535_0_0
                      ephemeral:
                        events:
                          - type: m.typing
                            content:
                              user_ids:
                                - '@alice:example.com'
                      account_data:
                        events:
                          - type: m.tag
                            content:
                              tags:
                                work:
                                  order: 1
                          - type: org.example.custom.room.config
                            content:
                              custom_config_key: custom_config_value
                  invite:
                    '!696r7674:example.com':
                      invite_state:
                        events:
                          - sender: '@alice:example.com'
                            type: m.room.name
                            state_key: ''
                            content:
                              name: My Room Name
                          - sender: '@alice:example.com'
                            type: m.room.member
                            state_key: '@bob:example.com'
                            content:
                              membership: invite
                  leave: {}

  # Device Management
  /client/r0/delete_devices:
    post:
      tags:
      - Device management
      summary: Bulk deletion of devices
      description: |-
        This API endpoint uses the `User-Interactive Authentication API`_.
        Deletes the given devices, and invalidates any access token associated with them.
      operationId: deleteDevices
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/delete_devices_request_body"

      responses:
        200:
          description: The devices were successfully removed, or had been removed previously.
          content:
            application/json:
              schema:
                type: object
              example: {}
        401:
          description: The homeserver requires additional authentication information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/requires_additional_auth"
                
      security:
      - accessToken: []

  # Media
  /media/r0/upload:
    post:
      tags:
      - Media
      summary: Upload some content to the content repository.
      operationId: uploadContent
      parameters:
      - name: Content-Type
        in: header
        description: The content type of the file being uploaded
        schema:
          type: string
        example: 'Content-Type: audio/mpeg'
      - name: filename
        in: query
        description: The name of the file being uploaded
        schema:
          type: string
        example: War and Peace.pdf
      requestBody:
        description: The content to be uploaded.
        content:
          application/json:
            schema:
              type: string
              format: byte
              example: <bytes>
        required: true
      responses:
        200:
          description: The MXC URI for the uploaded content.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_media_upload"
              example:
                content_uri: mxc://example.com/AQwafuaFswefuhsfAFAgsw
        429:
          description: This request was rate-limited.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rate_limited"
      security:
      - accessToken: []

  # User Data
  /client/r0/account/whoami:
    get:
      tags:
      - User data
      summary: Gets information about the owner of an access token.
      description: Gets information about the owner of a given access token. Note that, as with the rest of the Client-Server API, Application Services may masquerade as users within their namespace by giving a `user_id` query parameter. In this situation, the server should verify that the given `user_id` is registered by the appservice, and return it in the response body.
      operationId: getTokenOwner
      responses:
        200:
          description: The token belongs to a known user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_whoami"
              example:
                user_id: '@joe:example.org'
                
        401:
          description: The token is not recognised
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                errcode: M_UNKNOWN_TOKEN
                error: Unrecognised access token.
        403:
          description: The appservice cannot masquerade as the user or has not registered
            them.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                errcode: M_FORBIDDEN
                error: Application service has not registered this user.
        429:
          description: This request was rate-limited.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rate_limited"
      security:
      - accessToken: []

  /client/r0/register:
    post:
      tags:
      - User data
      summary: Register for an account on this homeserver.
      description: |-
        This API endpoint uses the `User-Interactive Authentication API`_.

        Register for an account on this homeserver.

        There are two kinds of user account:

        - `user` accounts. These accounts may use the full API described in this specification.

        - `guest` accounts. These accounts may have limited permissions and may not be supported by all servers.

        If registration is successful, this endpoint will issue an access token
        the client can use to authorize itself in subsequent requests.

        If the client does not supply a ``device_id``, the server must
        auto-generate one.

        The server SHOULD register an account with a User ID based on the
        ``username`` provided, if any. Note that the grammar of Matrix User ID
        localparts is restricted, so the server MUST either map the provided
        ``username`` onto a ``user_id`` in a logical manner, or reject
        ``username``\s which do not comply to the grammar, with
        ``M_INVALID_USERNAME``.

        Matrix clients MUST NOT assume that localpart of the registered
        ``user_id`` matches the provided ``username``.

        The returned access token must be associated with the ``device_id``
        supplied by the client or generated by the server. The server may
        invalidate any access token previously associated with that device. See
        `Relationship between access tokens and devices`_.
      operationId: register
      parameters:
      - name: kind
        in: query
        description: The kind of account to register. Defaults to `user`.
        schema:
          type: string
          default: user
          enum:
          - guest
          - user
        example: user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/register_request_body"
      responses:
        200:
          description: The account has been registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_register"
                
        400:
          description: |-
            Part of the request was invalid. This may include one of the following error codes:

            * ``M_USER_IN_USE`` : The desired user ID is already taken.
            * ``M_INVALID_USERNAME`` : The desired user ID is not a valid user name.
            * ``M_EXCLUSIVE`` : The desired user ID is in the exclusive namespace
              claimed by an application service.

            These errors may be returned at any stage of the registration process,
            including after authentication if the requested user ID was registered
            whilst the client was performing authentication.

            Homeservers MUST perform the relevant checks and return these codes before
            performing User-Interactive Authentication, although they may also return
            them after authentication is completed if, for example, the requested user ID
            was registered whilst the client was performing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                errcode: M_USER_IN_USE
                error: Desired user ID is already taken.
        401:
          description: The homeserver requires additional authentication information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/requires_additional_auth"
        429:
          description: This request was rate-limited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rate_limited'

  /client/r0/join/{roomIdOrAlias}:
    post:
      tags:
      - Room membership
      summary: Start the requesting user participating in a particular room.
      description: |-
        *Note that this API takes either a room ID or alias, unlike* ``/room/{roomId}/join``.

        This API starts a user participating in a particular room, if that user
        is allowed to participate in that room. After this call, the client is
        allowed to see all current state events in the room, and all subsequent
        events associated with the room until the user leaves the room.

        After a user has joined a room, the room will appear as an entry in the
        response of the |/initialSync|_ and |/sync|_ APIs.

        If a ``third_party_signed`` was supplied, the homeserver must verify
        that it matches a pending ``m.room.third_party_invite`` event in the
        room, and perform key validity checking if required by the event.
      operationId: joinRoom
      parameters:
      - name: roomIdOrAlias
        in: path
        description: The room identifier or alias to join.
        required: true
        schema:
          type: string
        example: '#monkeys:matrix.org'
      - name: server_name
        in: query
        description: |-
          The servers to attempt to join the room through. One of the servers
          must be participating in the room.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
        example:
        - matrix.org
        - elsewhere.ca
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/join_roomid_req"
            example:
              third_party_signed:
                signed:
                  mxid: '@green:eggs.ham'
                  sender: '@cat:the.hat'
                  signatures:
                    horton.hears:
                      ed25519:0: some9signature
                  token: random8nonce
        required: false
      responses:
        200:
          description: |-
            The room has been joined.

            The joined room ID must be returned in the ``room_id`` field.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/room_id"
        403:
          description: |-
            You do not have permission to join the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejection are:

            - The room is invite-only and the user was not invited.
            - The user has been banned from the room.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                errcode: M_FORBIDDEN
                error: You are not invited to this room.
        429:
          description: This request was rate-limited.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rate_limited"
      security:
      - accessToken: []

  /client/r0/rooms/{roomId}/state/{eventType}:
    get:
      tags:
      - Room participation
      summary: Get the state identified by the type, with the empty state key.
      description: |-
        Looks up the contents of a state event in a room. If the user is
        joined to the room then the state is taken from the current
        state of the room. If the user has left the room then the state is
        taken from the state of the room when they left.

        This looks up the state event with the empty state key.
      operationId: getRoomStateByType
      parameters:
      - name: roomId
        in: path
        description: The room to look up the state in.
        required: true
        schema:
          type: string
        example: '!636q39766251:example.com'
      - name: eventType
        in: path
        description: The type of state to look up.
        required: true
        schema:
          type: string
        example: m.room.name
      responses:
        200:
          description: The content of the state event.
          content:
            application/json:
              schema:
                type: object
              example:
                name: Example room name
        403:
          description: |
            You aren't a member of the room and weren't previously a member of the room.
          content: {}
        404:
          description: The room has no state with the given type or key.
          content: {}
      security:
      - accessToken: []
    put:
      tags:
      - Room participation
      summary: Send a state event to the given room.
      description: |
        State events can be sent using this endpoint. This endpoint is
        equivalent to calling `/rooms/{roomId}/state/{eventType}/{stateKey}`
        with an empty `stateKey`. Previous state events with matching
        `<roomId>` and `<eventType>`, and empty `<stateKey>`, will be overwritten.

        Requests to this endpoint **cannot use transaction IDs**
        like other ``PUT`` paths because they cannot be differentiated from the
        ``state_key``. Furthermore, ``POST`` is unsupported on state paths.

        The body of the request should be the content object of the event; the
        fields in this object will vary depending on the type of event. See
        `Room Events`_ for the ``m.`` event specification.
      operationId: setRoomState
      parameters:
      - name: roomId
        in: path
        description: The room to set the state in
        required: true
        schema:
          type: string
        example: '!636q39766251:example.com'
      - name: eventType
        in: path
        description: The type of event to send.
        required: true
        schema:
          type: string
        example: m.room.name
      requestBody:
        content:
          application/json:
            schema:
              $ref: "redact_evenId_txnId"
              example:
                name: New name for the room
        required: false
      responses:
        200:
          description: An ID for the sent event.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_state_eventType"
              example:
                event_id: $YUwRidLecu:example.com
        403:
          description: The sender doesn't have permission to send the event into the room.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                errcode: M_FORBIDDEN
                error: You do not have permission to send the event.
      security:
      - accessToken: []

  /client/r0/rooms/{roomId}/redact/{eventId}/{txnId}:
    put:
      tags:
      - Room participation
      summary: Strips all non-integrity-critical information out of an event.
      description: |-
        Strips all information out of an event which isn't critical to the
        integrity of the server-side representation of the room.

        This cannot be undone.

        Users may redact their own events, and any user with a power level
        greater than or equal to the `redact` power level of the room may
        redact events there.
      operationId: redactEvent
      parameters:
      - name: roomId
        in: path
        description: The room from which to redact the event.
        required: true
        schema:
          type: string
        example: '!637q39766251:example.com'
      - name: eventId
        in: path
        description: The ID of the event to redact
        required: true
        schema:
          type: string
        example: bai2b1i9:matrix.org
      - name: txnId
        in: path
        description: |-
          The transaction ID for this event. Clients should generate a
          unique ID; it will be used by the server to ensure idempotency of requests.
        required: true
        schema:
          type: string
        example: "37"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/redact_evenId_txnId"
              example:
                reason: Indecent material
        required: false
      responses:
        200:
          description: An ID for the redaction event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_id'
              example:
                event_id: $YUwQidLecu:example.com
      security:
      - accessToken: []

  /client/r0/rooms/{roomId}/messages:
    get:
      tags:
      - Room participation
      summary: Get a list of events for this room
      description: |-
        This API returns a list of message and state events for a room. It uses
        pagination query parameters to paginate history in the room.
      operationId: getRoomEvents
      parameters:
      - name: roomId
        in: path
        description: The room to get events from.
        required: true
        schema:
          type: string
        example: '!636q39766251:example.com'
      - name: from
        in: query
        description: |-
          The token to start returning events from. This token can be obtained
          from a ``prev_batch`` token returned for each room by the sync API,
          or from a ``start`` or ``end`` token returned by a previous request
          to this endpoint.
        required: true
        schema:
          type: string
        example: s345_678_333
      - name: to
        in: query
        description: |-
          The token to stop returning events at. This token can be obtained from
          a ``prev_batch`` token returned for each room by the sync endpoint,
          or from a ``start`` or ``end`` token returned by a previous request to
          this endpoint.
        schema:
          type: string
      - name: dir
        in: query
        description: The direction to return events from.
        required: true
        schema:
          type: string
          enum:
          - b
          - f
        example: b
      - name: limit
        in: query
        description: 'The maximum number of events to return. Default: 10.'
        schema:
          type: integer
        example: "3"
      - name: filter
        in: query
        description: A JSON RoomEventFilter to filter returned events with.
        schema:
          type: string
        example: '{"contains_url":true}'
      responses:
        200:
          description: A list of messages with a new token to request more.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roomid_messages"
                example:
                  chunk:
                  - age: 1042
                    content:
                      body: hello world
                      msgtype: m.text
                    event_id: $1444812213350496Caaaa:example.com
                    origin_server_ts: 1444812213737
                    room_id: '!Xq3620DUiqCaoxq:example.com'
                    sender: '@alice:example.com'
                    type: m.room.message
                  - age: 20123
                    content:
                      body: the world is big
                      msgtype: m.text
                    event_id: $1444812213350496Cbbbb:example.com
                    origin_server_ts: 1444812194656
                    room_id: '!Xq3620DUiqCaoxq:example.com'
                    sender: '@bob:example.com'
                    type: m.room.message
                  - age: 50789
                    content:
                      name: New room name
                    event_id: $1444812213350496Ccccc:example.com
                    origin_server_ts: 1444812163990
                    prev_content:
                      name: Old room name
                    room_id: '!Xq3620DUiqCaoxq:example.com'
                    sender: '@bob:example.com'
                    state_key: ""
                    type: m.room.name
                  end: t47409-4357353_219380_26003_2265
                  start: t47429-4392820_219380_26003_2265
        403:
          description: |
            You aren't a member of the room.
          content: {}
      security:
      - accessToken: []




components:
  schemas:
    user_identifier:
      title: User identifier
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of identification.  See `Identifier types`_ for supported values and additional property descriptions.
        user:
          type: string
          description: 'The fully qualified user ID or just local part of the user ID, to log in.  Deprecated in favour of ``identifier``.'
      description: Identification information for a user
    rate_limited:
      required:
        - errcode
      type: object
      properties:
        errcode:
          type: string
          description: The M_LIMIT_EXCEEDED error code
          example: M_LIMIT_EXCEEDED
        error:
          type: string
          description: A human-readable error message.
          example: Too many requests
        retry_after_ms:
          type: integer
          description: |-
            The amount of time in milliseconds the client should wait
            before trying the request again.
          example: 2000
      description: The rate limit was reached for this request

    claimKeys_request_body:
      type: object
      properties:
        one_time_keys:
          type: object
          description: The keys to be claimed. A map from user ID, to a map from device ID to algorithm name.
          additionalProperties:
            type: object
            additionalProperties:
              type: string
              description: algorithm
              example: signed_curve25519
          example:
            '@alice:example.com':
              JLAFKJWSCS: signed_curve25519
        timeout:
          type: integer
          description: The time (in milliseconds) to wait when downloading keys from remote servers. 10 seconds is the recommended default.
          example: 10000
      required:
        - one_time_keys

    login_request_body:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The login type being used.
          enum:
            - m.login.password
            - m.login.token
        identifier:
          $ref: '#/components/schemas/user_identifier'
        medium:
          type: string
          description: 'When logging in using a third party identifier, the medium of the identifier. Must be ''email''.  Deprecated in favour of ``identifier``.'
        address:
          type: string
          description: Third party identifier for the user.  Deprecated in favour of ``identifier``.
        password:
          type: string
          description: |-
            Required when ``type`` is ``m.login.password``. The user's
            password.
        token:
          type: string
          description: Required when ``type`` is ``m.login.token``. Part of `Token-based`_ login.
        device_id:
          type: string
          description: |-
            ID of the client device. If this does not correspond to a
            known client device, a new device will be created. The server
            will auto-generate a device_id if this is not specified.
        initial_device_display_name:
          type: string
          description: |-
            A display name to assign to the newly-created device. Ignored
            if ``device_id`` corresponds to a known device.
      example:
        type: m.login.password
        identifier:
          type: m.id.user
          user: cheeky_monkey
        password: ilovebananas
        initial_device_display_name: Jungle Phone
    
    error:
      required:
        - errcode
      type: object
      properties:
        errcode:
          type: string
          description: An error code.
          example: M_UNKNOWN
        error:
          type: string
          description: A human-readable error message.
          example: An unknown error occurred
      description: A Matrix-level Error
 
    device_keys:
      title: DeviceKeys
      type: object
      description: Device identity keys
      properties:
        user_id:
          type: string
          description: The ID of the user the device belongs to. Must match the user ID used when logging in.
          example: '@alice:example.com'
        device_id:
          type: string
          description: The ID of the device these keys belong to. Must match the device ID used when logging in.
          example: JLAFKJWSCS
        algorithms:
          type: array
          description: The encryption algorithms supported by this device.
          items:
            type: string
          example:
            - m.olm.curve25519-aes-sha256
            - m.megolm.v1.aes-sha
        keys:
          type: object
          additionalProperties:
            type: string
          description: 'Public identity keys. The names of the properties should be in the format `<algorithm>:<device_id>`. The keys themselves should be encoded as specified by the key algorithm.'
          example:
            'curve25519:JLAFKJWSCS': 3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI
            'ed25519:JLAFKJWSCS': lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI
        signatures:
          type: object
          description: 'Signatures for the device key object. A map from user ID, to a map from `<algorithm>:<device_id>` to the signature. The signature is calculated using the process described at `Signing JSON`.'
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          example:
            '@alice:example.com':
              'ed25519:JLAFKJWSCS': dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA
        unsigned:
          $ref: '#/components/schemas/UnsignedDeviceInfo'
      required:
        - algorithms
        - device_id
        - keys
        - signatures
        - user_id
    
    UnsignedDeviceInfo:
      type: object
      description: 'Additional data added to the device key information by intermediate servers, and not covered by the signatures.'
      properties:
        device_display_name:
          type: string
          description: The display name which the user set on the device.
  
    keys_upload:
      type: object
      properties:
        device_keys:
          type: object
          description: Identity keys for the device. May be absent if no new identity keys are required.
          properties:
            user_id:
              type: string
            device_id:
              type: string
            algorithms:
              type: array
              items:
                type: string
            keys:
              type: object
              additionalProperties:
                type: string
            signatures:
              $ref: "#/components/schemas/signatures"
        one_time_keys:
          type: object
          properties: {}
          description: 'One-time public keys for `pre-key` messages. The names of the properties should be in the format `<algorithm>:<key_id>`. The format of the key is determined by the key algorithm. May be absent if no new one-time keys are required.'
          example:
            'curve25519:AAAAAQ': /qyvZvwjiTxGdGU0RCguDCLeR+nmsb3FfNG3/Ve4vU8
            'signed_curve25519:AAAAHg':
              key: zKbLg+NrIjpnagy+pIY6uPL4ZwEG2v+8F9lmgsnlZzs
              signatures:
                '@alice:example.com':
                  'ed25519:JLAFKJWSCS': FLWxXqGbwrb8SM3Y795eB6OA8bwBcoMZFXBqnTn58AYWZSqiD45tlBVcDa2L7RwdKXebW/VzDlnfVJ+9jok1Bw
            'signed_curve25519:AAAAHQ':
              key: j3fR3HemM16M7CWhoI4Sk5ZsdmdfQHsKL1xuSft6MSw
              signatures:
                '@alice:example.com':
                  'ed25519:JLAFKJWSCS': IQeCEPb9HFk217cU9kw9EOiusC6kMIkoIRnbnfOh5Oc63S1ghgyjShBGpu34blQomoalCyXWyhaaT3MrLZYQAA
    
    signatures:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: string
    query_keys:
      type: object
      properties:
        timeout:
          type: integer
          description: The time (in milliseconds) to wait when downloading keys from remote servers. 10 seconds is the recommended default.
          example: 10000
        device_keys:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              description: device ID
          description: 'The keys to be downloaded. A map from user ID, to a list of device IDs, or to an empty list to indicate all devices for the corresponding user.'
          example:
            '@alice:example.com': []
        token:
          type: string
          description: 'If the client is fetching keys as a result of a device update received in a sync request, this should be the ''since'' token of that sync request, or any later sync token. This allows the server to ensure its response contains the keys advertised by the notification in that sync.'
      required:
        - device_keys
    void: {}
    
    200_login_get:
      type: object
      properties:
        flows:
          type: array
          description: The homeserver's supported login types
          items:
            title: LoginFlow
            type: object
            properties:
              type:
                type: string
                description: The login type. This is supplied as the ``type`` when logging in.
    200_login_put:
      type: object
      properties:
        user_id:
          type: string
          description: The fully-qualified Matrix ID that has been registered.
        access_token:
          type: string
          description: |-
            An access token for the account.
            This access token can then be used to authorize other requests.
        home_server:
          type: string
          description: |-
            The server_name of the homeserver on which the account has
            been registered.
            **Deprecated**. Clients should extract the server_name from
            ``user_id`` (by splitting at the first colon) if they require
            it. Note also that ``homeserver`` is not spelt this way.
        device_id:
          type: string
          description: |-
            ID of the logged-in device. Will be the same as the
            corresponding parameter in the request, if one was specified. 
    200_keys_upload:
      type: object
      properties:
        one_time_key_counts:
          description: 'For each key algorithm, the number of unclaimed one-time keys of that type currently held on the server for this device.'
          type: object
          additionalProperties:
            type: integer
          example:
            curve25519: 10
            signed_curve25519: 20
      required:
        - one_time_key_counts
    200_query_keys:
      type: object
      properties:
        failures:
          description: 'If any remote homeservers could not be reached, they are recorded here. The names of the properties are the names of the unreachable servers. If the homeserver could be reached, but the user or device was unknown, no failure is recorded. Instead, the corresponding user or device is missing from the `device_keys` result.'
          type: object
          additionalProperties:
            type: object
            properties: {}
        device_keys:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/device_keys'
          description: 'Information on the queried devices. A map from user ID, to a map from device ID to device information.  For each device, the information returned will be the same as uploaded via ``/keys/upload``, with the addition of an ``unsigned`` property.'
          example:
            '@alice:example.com':
              JLAFKJWSCS:
                user_id: '@alice:example.com'
                device_id: JLAFKJWSCS
                algorithms:
                  - m.olm.v1.curve25519-aes-sha256
                  - m.megolm.v1.aes-sha
                keys:
                  'curve25519:JLAFKJWSCS': 3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI
                  'ed25519:JLAFKJWSCS': lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI
                signatures:
                  '@alice:example.com':
                    'ed25519:JLAFKJWSCS': dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA
                unsigned:
                  device_display_name: Alice's mobile phone
                  
    sendEventTxnid_body:
      type: object
      example:
        msgtype: m.text
        body: hello
      
    event_id:
      type: object
      properties:
        event_id:
          type: string
          description: A unique identifier for the event.
      example:
        event_id: '$YUwRidLecu:example.com'
        
    200_getKeysChanges:
      type: object
      properties:
        changed:
          description: The Matrix User IDs of all users who updated their device\nidentity keys.
          type: array
          items:
            type: string
          example:
            - "@alice:example.com"
            - "@bob:example.org"
        left:
          description: The Matrix User IDs of all users who may have left all\nthe end-to-end encrypted rooms they previously shared\nwith the user.
          type: array
          items:
            type: string
          example:
            - "@clara:example.com"
            - "@doug:example.org"

    
    200_claimKeys:
      type: object
      properties:
        failures:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: |-
            If any remote homeservers could not be reached, they are
            recorded here. The names of the properties are the names of
            the unreachable servers.

            If the homeserver could be reached, but the user or device
            was unknown, no failure is recorded. Instead, the corresponding
            user or device is missing from the ``one_time_keys`` result.
          example: {}
        one_time_keys:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: object
              properties: {}
          description: |-
            One-time keys for the queried devices. A map from user ID, to a
            map from devices to a map from ``<algorithm>:<key_id>`` to the key object.
          example:
            '@alice:example.com':
              JLAFKJWSCS:
                signed_curve25519:AAAAHg:
                  key: zKbLg+NrIjpnagy+pIY6uPL4ZwEG2v+8F9lmgsnlZzs
                  signatures:
                    '@alice:example.com':
                      ed25519:JLAFKJWSCS: FLWxXqGbwrb8SM3Y795eB6OA8bwBcoMZFXBqnTn58AYWZSqiD45tlBVcDa2L7RwdKXebW/VzDlnfVJ+9jok1Bw
  
  
    sync_rooms:
      title: Rooms
      type: object
      description: Updates to rooms.
      properties:
        join:
          $ref: '#/components/schemas/sync_rooms_join'
        invite:
          $ref: '#/components/schemas/sync_rooms_invite'
        leave:
          $ref: '#/components/schemas/sync_rooms_leave'

    sync_rooms_join:
      title: Joined Rooms
      type: object
      description: The rooms that the user has joined.
      additionalProperties:
        title: Joined Room
        type: object
        properties:
          state:
            title: State
            type: object
            description: |-
              Updates to the state, between the time indicated by
              the ``since`` parameter, and the start of the
              ``timeline`` (or all state up to the start of the
              ``timeline``, if ``since`` is not given, or
              ``full_state`` is true).

              N.B. state updates for ``m.room.member`` events will
              be incomplete if ``lazy_load_members`` is enabled in
              the ``/sync`` filter, and only return the member events
              required to display the senders of the timeline events
              in this response.
            properties:
              events:
                description: List of events.
                type: array
                items:
                  $ref: '#/components/schemas/stateevent'
          timeline:
            $ref: '#/components/schemas/timeline'
          ephemeral:
            $ref: '#/components/schemas/list_of_event'
          account_data:
            $ref: '#/components/schemas/list_of_event'
          unread_notifications:
            $ref: '#/components/schemas/unread_notifications'
    list_of_event:
      type: object
      description: List of events.
      properties:
        events:
          type: array
          description: The timeline of messages and state changes in the room.
          items:
            $ref: '#/components/schemas/Event'
    unread_notifications:
      type: object
      description: Counts of unread notifications for this room
      properties:
        highlight_count:
          type: integer
          description: The number of unread notifications for this room with the highlight flag set
        notification_count:
          type: integer
          description: The total number of unread notifications for this room

    timeline:
      type: object
      description: The timeline of messages and state changes in the room.
      properties:
        limited:
          type: boolean
          description: '`True` if the number of events returned was limited by the limit on the filter.'
        prev_batch:
          type: string
          description: 'A token that can be supplied to the from parameter of the rooms /{roomId}/messages endpoint.'
        events:
          type: array
          items:
            $ref: "#/components/schemas/timeline_event"

    timeline_event:
      type: object
      properties:
        content:
          type: object
          description: 'Fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.'
        type:
          type: string
          description: The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. `com.example.subdomain.event.type`
        event_id:
          type: string
          description: The globally unique event identifier.
        sender:
          type: string
          description: Contains the fully-qualified ID of the user who sent this event.
        origin_server_ts:
          type: integer
          description: Timestamp in milliseconds on originating homeserver when this event was sent.
        unsigned:
          $ref: '#/components/schemas/UnsignedData'

    messages_roomevent:
      type: object
      properties:
        content:
          type: object
          description: 'Fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.'
        type:
          type: string
          description: The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. `com.example.subdomain.event.type`
        event_id:
          type: string
          description: The globally unique event identifier.
        sender:
          type: string
          description: Contains the fully-qualified ID of the user who sent this event.
        origin_server_ts:
          type: integer
          description: Timestamp in milliseconds on originating homeserver when this event was sent.
        unsigned:
          $ref: '#/components/schemas/UnsignedData'
        room_id:
          type: string
          description: Timestamp in milliseconds on originating homeserver when this event was sent. The ID of the room associated with this event. Will not be present on events that arrive through /sync, despite being required everywhere else.

    stateevent:
      type: object
      properties:
        content:
          type: object
          description: 'Fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.'
        type:
          type: string
          description: The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. `com.example.subdomain.event.type`
        event_id:
          type: string
          description: The globally unique event identifier.
        sender:
          type: string
          description: Contains the fully-qualified ID of the user who sent this event.
        origin_server_ts:
          type: integer
          description: Timestamp in milliseconds on originating homeserver when this event was sent.
        state_key:
          type: string
          description: 'A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event. State keys starting with an @ are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user''s ID as the state key MUST only be set by that user.'
        unsigned:
          $ref: '#/components/schemas/UnsignedData'
        prev_content:
          type: object
          description: 'Optional. The previous content for this event. If there is no previous content, this key will be missing.'

          
    UnsignedData:
      type: object
      description: Contains optional extra information about the event.
      properties:
        age:
          type: integer
          description: 'The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.'
        transaction_id:
          type: string
          description: 'The client-supplied transaction ID, if the client being given the event is the same one which sent it.'
        redacted_because:
          description: 'Optional. The event that redacted this event, if any.'
          $ref: '#/components/schemas/Event'
    Event:
      type: object
      properties:
        content:
          type: object
          description: 'Fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.'
        type:
          type: string
          description: The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. `com.example.subdomain.event.type`
    sync_rooms_invite:
      type: object
      description: 'The state of a room that the user has been invited to. These state events may only have the sender, type, state_key and content keys present. These events do not replace any state that the client already has for the room, for example if the client has archived the room. Instead the client should keep two separate copies of the `state:` the one from the invite_state and one from the archived state. If the client joins the room then the current state will be given as a delta against the archived state not the invite_state.'
      properties:
        invite_state:
          $ref: '#/components/schemas/invite_state'
    invite_state:
      type: object
      properties:
        events:
          type: array
          description: array of StrippedState
          items:
            $ref: '#/components/schemas/StrippedState'
    StrippedState:
      type: object
      description: The StrippedState events that form the invite state.
      properties:
        content:
          $ref: '#/components/schemas/EventContent'
          description: Required. The content for the event.
        state_key:
          type: string
          description: Required. The state_key for the event.
        type:
          type: string
          description: Required. The type for the event.
        sender:
          type: string
          description: Required. The sender for the event.
      required:
        - content
        - state_key
        - type
        - sender
    EventContent:
      type: object
      properties:
        avatar_url:
          type: string
          description: 'The avatar URL for this user, if any. This is added by the homeserver.'
        displayname:
          type: string
          nullable: true
          description: 'The display name for this user, if any. This is added by the homeserver.'
        membership:
          enum:
            - invite
            - join
            - knock
            - leave
            - ban
          description: The membership state of the user.
        is_direct:
          type: boolean
          description: Flag indicating if the room containing this event was created with the intention of being a direct chat. See Direct Messaging.
        third_party_invite:
          $ref: '#/components/schemas/Invite'
        unsigned:
          $ref: '#/components/schemas/UnsignedData'
    Invite:
      type: object
      properties:
        display_name:
          type: string
          description: A name which can be displayed to represent the user instead of their third party identifier
        signed:
          $ref: '#/components/schemas/invite_signed'
          
    invite_signed:
      type: object
      description: A block of content which has been signed, which servers can use to verify the event. Clients should ignore this.
      properties:
        mxid:
          type: string
          description: The invited matrix user ID. Must be equal to the user_id property of the event.
          
        signatures:
          type: object
          description: A single signature from the verifying server, in the format specified by the Signing Events section of the server-server API.
          
        token:
          type: string
          description: The token property of the containing third_party_invite object.
    
    sync_rooms_leave:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/list_of_event'
        timeline:
          $ref: '#/components/schemas/timeline'
        account_data:
          $ref: '#/components/schemas/sync_account_data'
    sync_account_data:
      $ref: '#/components/schemas/list_of_event'
    sync_presence:
      $ref: '#/components/schemas/list_of_event'
    sync_response:
      type: object
      description: The initial snapshot or delta for the client to use to update their state.
      properties:
        next_batch:
          type: string
          description: The batch token to supply in the ``since`` param of the next `/sync` request.
        rooms:
          $ref: '#/components/schemas/sync_rooms'
        presence:
          $ref: '#/components/schemas/sync_presence'
        account_data:
          $ref: '#/components/schemas/sync_account_data'
        to_device:
          title: ToDevice
          type: object
          properties: {}
          description: 'Information on the send-to-device messages for the client device, as defined in |send_to_device_sync|.'
        device_lists:
          title: DeviceLists
          type: object
          description: 'Information on end-to-end device updates, as specified in |device_lists_sync|.'
          properties:
            changed:
              type: array
              items:
                type: string
            left:
              type: array
              items:
                type: string
        device_one_time_keys_count:
          title: One-time keys count
          type: object
          additionalProperties:
            type: integer
            description: 'Information on end-to-end encryption keys, as specified in |device_lists_sync|.'
  
    delete_devices_request_body:
      type: object
      properties:
        auth:
          $ref: "#/components/schemas/auth"
        devices:
          type: array
          description: The list of device IDs to delete.
          items:
            type: string
            description: A list of device IDs.
          example:
          - QBUAZIFURK
          - AUIECTSRND
      required:
      - devices
    
    requires_additional_auth:
      title: Authentication response
      description: Used by servers to indicate that additional authentication information is required.
      type: object
      properties:
        flows:
          type: array
          description: A list of the login flows supported by the server for this API.
          items:
            type: object
            properties:
              stages:
                type: array
                description: The login type of each of the stages required to complete this authentication flow
                items:
                  type: string
                  example: example.type.foo
            required:
            - stages
        session:
          type: string
          description: This is a session identifier that the client must pass back to the home server, if one is provide, in subsequent attempts to authenticate in the same API call.
          example: xxxxxxyz
        completed:
          type: array
          description: A list of the stages the client has completed successfully
          items:
            type: string
            example: example.type.foo
        params:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Contains any information that the client will need to know in order to use a given type of authentication. For each login type presented, that type may be present as a key in this dictionary. For example, the public part of an OAuth client ID could be given here.
          example:
            example.type.baz:
              example_key: foobar
      required:
      - flows
  
    auth:
      title: Authentication Data
      type: object
      description: |-
        Additional authentication information for the
        user-interactive authentication API.
      additionalProperties:
        description: Keys dependent on the login type
        type: object
        properties: {}
      example:
        example_credential: verypoorsharedsecret
        session: xxxxx
        type: example.type.foo

    register_request_body:
      type: object
      properties:
        auth:
          $ref: "#/components/schemas/auth"
        bind_email:
          type: boolean
          description: |-
            If true, the server binds the email used for authentication to
            the Matrix ID with the identity server.
          example: false
        device_id:
          type: string
          description: |-
            ID of the client device. If this does not correspond to a
            known client device, a new device will be created. The server
            will auto-generate a device_id if this is not specified.
          example: GHTYAJCE
        inhibit_login:
          type: boolean
          description: |-
            If true, an ``access_token`` and ``device_id`` should not be
            returned from this call, therefore preventing an automatic
            login. Defaults to false.
          example: false
        initial_device_display_name:
          type: string
          description: |-
            A display name to assign to the newly-created device. Ignored
            if ``device_id`` corresponds to a known device.
          example: Jungle Phone
        password:
          type: string
          description: The desired password for the account.
          example: ilovebananas
        username:
          type: string
          description: |-
            The basis for the localpart of the desired Matrix ID. If omitted,
            the homeserver MUST generate a Matrix ID local part.
          example: cheeky_monkey
  

    200_register:
      type: object
      properties:
        access_token:
          type: string
          description: |-
            An access token for the account.
            This access token can then be used to authorize other requests.
            Required if the ``inhibit_login`` option is false.
        device_id:
          type: string
          description: |-
            ID of the registered device. Will be the same as the
            corresponding parameter in the request, if one was specified.
            Required if the ``inhibit_login`` option is false.
        user_id:
          type: string
          description: |-
            The fully-qualified Matrix user ID (MXID) that has been registered.

            Any user ID returned by this API must conform to the grammar given in the
            `Matrix specification <https://matrix.org/docs/spec/appendices.html#user-identifiers>`_.
        home_server:
          type: string
          description: |-
            The server_name of the homeserver on which the account has
            been registered.

            **Deprecated**. Clients should extract the server_name from
            ``user_id`` (by splitting at the first colon) if they require
            it. Note also that ``homeserver`` is not spelt this way.
      required:
      - user_id
      example:
        access_token: abc123
        device_id: GHTYAJCE
        user_id: '@cheeky_monkey:matrix.org'

    200_whoami:
      type: object
      properties:
        user_id:
          type: string
          description: The user id that owns the access token.
      required:
      - user_id

    200_media_upload:
      type: object
      properties:
        content_uri:
          type: string
          description: The MXC URI to the uploaded content.
      required:
      - content_uri

    create_room:
      type: object
      properties:
        creation_content:
          title: CreationContent
          type: object
          properties: {}
          description: |-
            Extra keys, such as ``m.federate``, to be added to the content
            of the `m.room.create`_ event. The server will clobber the following
            keys: ``creator``, ``room_version``. Future versions of the specification
            may allow the server to clobber other keys.
        initial_state:
          type: array
          description: |-
            A list of state events to set in the new room. This allows
            the user to override the default state events set in the new
            room. The expected format of the state events are an object
            with type, state_key and content keys set.

            Takes precedence over events set by ``preset``, but gets
            overriden by ``name`` and ``topic`` keys.
          items:
            $ref: "#/components/schemas/create_room_state_event"
        invite:
          type: array
          description: |-
            A list of user IDs to invite to the room. This will tell the
            server to invite everyone in the list to the newly created room.
          items:
            type: string
        invite_3pid:
          type: array
          description: |-
            A list of objects representing third party IDs to invite into
            the room.
          items:
            $ref: "#/components/schemas/invite_3pid"
        is_direct:
          type: boolean
          description: |-
            This flag makes the server set the ``is_direct`` flag on the
            ``m.room.member`` events sent to the users in ``invite`` and
            ``invite_3pid``. See `Direct Messaging`_ for more information.
        name:
          type: string
          description: |-
            If this is included, an ``m.room.name`` event will be sent
            into the room to indicate the name of the room. See Room
            Events for more information on ``m.room.name``.
        power_level_content_override:
          title: Power Level Event Content
          type: object
          properties: {}
          description: |-
            The power level content to override in the default power level
            event. This object is applied on top of the generated `m.room.power_levels`_
            event content prior to it being sent to the room. Defaults to
            overriding nothing.
        preset:
          type: string
          description: |-
            Convenience parameter for setting various default state events
            based on a preset.

            If unspecified, the server should use the ``visibility`` to determine
            which preset to use. A visbility of ``public`` equates to a preset of
            ``public_chat`` and ``private`` visibility equates to a preset of
            ``private_chat``.
          enum:
          - private_chat
          - public_chat
          - trusted_private_chat
        room_alias_name:
          type: string
          description: |-
            The desired room alias **local part**. If this is included, a
            room alias will be created and mapped to the newly created
            room. The alias will belong on the *same* homeserver which
            created the room. For example, if this was set to "foo" and
            sent to the homeserver "example.com" the complete room alias
            would be ``#foo:example.com``.

            The complete room alias will become the canonical alias for
            the room.
        room_version:
          type: string
          description: |-
            The room version to set for the room. If not provided, the homeserver is
            to use its configured default. If provided, the homeserver will return a
            400 error with the errcode ``M_UNSUPPORTED_ROOM_VERSION`` if it does not
            support the room version.
          example: "1"
        topic:
          type: string
          description: |-
            If this is included, an ``m.room.topic`` event will be sent
            into the room to indicate the topic for the room. See Room
            Events for more information on ``m.room.topic``.
        visibility:
          type: string
          description: |-
            A ``public`` visibility indicates that the room will be shown
            in the published room list. A ``private`` visibility will hide
            the room from the published room list. Rooms default to
            ``private`` visibility if this key is not included. NB: This
            should not be confused with ``join_rules`` which also uses the
            word ``public``.
          enum:
          - public
          - private
      example:
        creation_content:
          m.federate: false
        name: The Grand Duke Pub
        preset: public_chat
        room_alias_name: thepub
        topic: All about happy hour
        
    invite_3pid:
        title: Invite3pid
        type: object
        properties:
          address:
            type: string
            description: The invitee's third party identifier.
          medium:
            type: string
            description: The kind of address being passed in the address
              field, for example ``email``.
          id_server:
            type: string
            description: The hostname+port of the identity server which
              should be used for third party identifier lookups.
        required:
        - address
        - id_server
        - medium
              
    create_room_state_event:
      type: object
      properties:
        state_key:
          type: string
          description: The state_key of the state event. Defaults to
            an empty string.
        type:
          type: string
          description: The type of event to send.
        content:
          type: object
          properties: {}
          description: The content of the event.
      required:
      - content
      - type
      
    room_id:
      type: object
      properties:
        room_id:
          type: string
          description: The created room's ID.
      description: Information about the newly created room.
      required:
      - room_id
      example:
        room_id: '!sefiuhWgwghwWgh:example.com'
  
    room_dir_request_body:
      type: object
      properties:
        room_id:
          type: string
          description: The room ID for this room alias.
        servers:
          type: array
          description: A list of servers that are aware of this room alias.
          items:
            type: string
            description: A server which is aware of this room alias.

    join_roomid_req:
      type: object
      properties:
        third_party_signed:
          $ref: "#/components/schemas/third_party_signed"

    third_party_signed:
      title: ThirdPartySigned
      required:
      - signed
      type: object
      properties:
        signed:
          $ref: "#/components/schemas/join_signed"
      description: A signature of an ``m.third_party_invite`` token to
        prove that this user owns a third party identity which has been
        invited to the room.
        
    join_signed:
      title: Signed
      required:
      - mxid
      - sender
      - signatures
      - token
      type: object
      properties:
        mxid:
          type: string
          description: The Matrix ID of the invitee.
        sender:
          type: string
          description: The Matrix ID of the user who issued the invite.
        signatures:
          $ref: "#/components/schemas/signatures"
          description: A signatures object containing a signature
            of the entire signed object.
        token:
          type: string
          description: The state key of the m.third_party_invite event.

    200_state_eventType:
      type: object
      properties:
        event_id:
          type: string
          description: A unique identifier for the event.
    
    redact_evenId_txnId:
      type: object
      properties:
        reason:
          type: string
          description: The reason for the event being redacted.

    roomid_messages:
      description: A list of messages with a new token to request more.
      type: object
      properties:
        start:
          type: string
          description: |-
            The token the pagination starts from. If ``dir=b`` this will be
            the token supplied in ``from``.
        chunk:
          type: array
          description: A list of room events.
          items:
            $ref: "#/components/schemas/messages_roomevent"
        end:
          type: string
          description: |-
            The token the pagination ends at. If ``dir=b`` this token should
            be used again to request even earlier events.
  

  securitySchemes:
    accessToken:
      type: apiKey
      description: The access_token returned by a call to `/login` or `/register`
      name: access_token
      in: query
